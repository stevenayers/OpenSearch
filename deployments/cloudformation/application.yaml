AWSTemplateFormatVersion: "2010-09-09"
Description: "Stack for Clamber application"
Parameters:
  CidrBlock:
    Type: String
    Description: "Cidr Block for Application VPC"
    Default: "10.0.0.0/16"

Resources:

  # Network Level
  ApplicationInternetGateway:
    Type: AWS::EC2::InternetGateway
  ApplicationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsHostnames: Yes
      EnableDnsSupport: Yes
      InstanceTenancy: "default"
  ApplicationVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: ApplicationInternetGateway
      VpcId:
        Ref: ApplicationVPC
  ApplicationRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref:
          ApplicationVPC
  InternetAccessRoute:
    Type: AWS::EC2::Route
    DependsOn: ApplicationInternetGateway
    Properties:
      RouteTableId:
        Ref: ApplicationRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: ApplicationInternetGateway
  ClamberAPISubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: No
      VpcId:
        Ref: ApplicationVPC
  ClamberAPISubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ApplicationRouteTable
      SubnetId:
        Ref: ClamberAPISubnet
  ClamberServiceSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: No
      VpcId:
        Ref: ApplicationVPC


  # Clamber API
  ClamberAPI:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: "Clamber API"
      Description: "API for interacting with Clamber backend"
  ClamberDefaultEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName:
        Ref: ClamberAPI
      EnvironmentName: "Default"
      TemplateName:
        Ref: ClamberConfigurationTemplate
      VersionLabel:
        Ref: ClamberApplicationVersion
  ClamberApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName:
        Ref: ClamberAPI
      Description: AWS ElasticBeanstalk Sample Application Version
      SourceBundle:
        S3Bucket: "elasticbeanstalk-eu-west-2-311261809690"
        S3Key: api.zip
  ClamberConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:
        Ref: ClamberAPI
      Description: AWS ElasticBeanstalk Sample Configuration Template
      OptionSettings:
        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: '1'
        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: '2'
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: classic
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: aws-elasticbeanstalk-ec2-role
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value:
            Ref: ApplicationVPC
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value:
            Ref: ClamberAPISubnet
        - Namespace: aws:ec2:vpc
          OptionName: AssociatePublicIpAddress
          Value: true
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: EC2KeyName
          Value: "sayers-contino-1"
      SolutionStackName: 64bit Amazon Linux 2018.03 v2.14.1 running Go 1.13.2


  # Clamber Message Queue
  ClamberSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ClamberSQS


  # Clamber Service
  ClamberService:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Clamber Service ASG
      LaunchConfigurationName:
        Ref: ClamberLaunchConfig
      MaxSize: "5"
      MinSize: "1"
      VPCZoneIdentifier:
        - Ref:  ClamberAPISubnet
  ClamberScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: ClamberService
      Cooldown: '1'
      ScalingAdjustment: '1'
  ClamberLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      KeyName: "sayers-contino-1"
      ImageId: ami-f976839e
      SecurityGroups:
        - Ref: ClamberSG
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '50'
        - DeviceName: "/dev/sdc"
          VirtualName: ephemeral0
      UserData:
        'Fn::Base64': |
            #!/bin/bash
            set -x
            sudo yum update
            sudo yum install -y git
            curl -L --progress-bar https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz -o /tmp/go1.13.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf /tmp/go1.13.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bash_profile
            source ~/.bash_profile
            git clone https://github.com/stevenayers/clamber.git
            cd clamber/clamber/cmd/service
            export GOCACHE="/root/.cache/go-build"
            export GOPATH=/root/clamber
            env GOOS=linux GOARCH=amd64 go build -v -o ./service .
            ./service -config ../../../build/clamber/clamber-service/configs/config.toml > /var/log/clamber-service.log
  ClamberCPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '70'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
        - Ref: ClamberScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: ClamberService
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  ClamberSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: ApplicationVPC

  # DgraphZero ELB
  DgraphZeroELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
        - Ref: DgraphZeroSG
      Scheme: internal
      Subnets:
        - Ref:  ClamberAPISubnet
      Listeners:
        - InstancePort: 5080
          InstanceProtocol: tcp
          LoadBalancerPort: 5080
          Protocol: tcp
        - InstancePort: 6080
          InstanceProtocol: http
          LoadBalancerPort: 6080
          Protocol: http


  # DgraphZero ELB
  DgraphAlphaELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
        - Ref: DgraphAlphaSG
      Subnets:
        - Ref:  ClamberAPISubnet
      Listeners:
        - InstancePort: 8080
          InstanceProtocol: http
          LoadBalancerPort: 8080
          Protocol: http
        - InstancePort: 9080
          InstanceProtocol: tcp
          LoadBalancerPort: 9080
          Protocol: tcp


  # DgraphZero
  DgraphZero:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: DgraphZero Store ASG
      LaunchConfigurationName:
        Ref: DgraphZeroLaunchConfig
      LoadBalancerNames:
        - Ref: DgraphZeroELB
      MaxSize: "5"
      MinSize: "1"
      VPCZoneIdentifier:
        - Ref:  ClamberAPISubnet
  DgraphZeroScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: DgraphZero
      Cooldown: '1'
      ScalingAdjustment: '2'
  DgraphZeroLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: DgraphZeroELB
    Properties:
      AssociatePublicIpAddress: true
      KeyName: "sayers-contino-1"
      ImageId: ami-f976839e
      SecurityGroups:
        - Ref: DgraphZeroSG
      InstanceType: m5.large
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '50'
        - DeviceName: "/dev/sdc"
          VirtualName: ephemeral0
      UserData:
        'Fn::Base64':
          !Sub
            - |
              #!/bin/bash
              dgraph_link="https://github.com/dgraph-io/dgraph/releases/download/v1.1.1/dgraph-linux-amd64.tar.gz"
              # Download and untar Dgraph binaries
              if curl --output /dev/null --silent --head --fail "$dgraph_link"; then
                  echo "Downloading $dgraph_link"
                  curl -L --progress-bar "$dgraph_link" -o "/tmp/dgraph-linux-amd64.tar.gz"
                  echo "Download complete."
              else
                  echo "Soz Failed."
                  exit 1;
              fi
              sudo tar -C /usr/bin -xzf /tmp/dgraph-linux-amd64.tar.gz
              idx=$(( ( RANDOM % 1000 )  + 1 ))
              nc -w 2 ${DgraphLoadBalancer} 5080 &> /dev/null
              if [[ $? -ne 0 ]]; then
              exec dgraph zero --my=$(hostname -f):5080 --idx $idx --replicas 3
              else
              dgraph zero --my=$(hostname -f):5080 --peer ${DgraphLoadBalancer}:5080 --idx $idx --replicas 3
              fi
            - DgraphLoadBalancer: !GetAtt DgraphZeroELB.DNSName
  DgraphZeroCPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '70'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
        - Ref: DgraphZeroScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: DgraphZero
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  DgraphZeroSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: ApplicationVPC
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5080'
          ToPort: '5080'
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: '6080'
          ToPort: '6080'
          CidrIp: 10.0.0.0/16

  # DgraphAlpha
  DgraphAlpha:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: DgraphAlpha Store ASG
      LaunchConfigurationName:
        Ref: DgraphAlphaLaunchConfig
      LoadBalancerNames:
        - Ref: DgraphAlphaELB
      MaxSize: "5"
      MinSize: "1"
      VPCZoneIdentifier:
        - Ref:  ClamberAPISubnet
  DgraphAlphaScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: DgraphAlpha
      Cooldown: '1'
      ScalingAdjustment: '2'
  DgraphAlphaLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      KeyName: "sayers-contino-1"
      ImageId: ami-f976839e
      SecurityGroups:
        - Ref: DgraphAlphaSG
      InstanceType: m5.large
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '50'
        - DeviceName: "/dev/sdc"
          VirtualName: ephemeral0
      UserData:
        'Fn::Base64':
          Fn::Sub:
            - |
              #!/bin/bash
              dgraph_link="https://github.com/dgraph-io/dgraph/releases/download/v1.1.1/dgraph-linux-amd64.tar.gz"
              # Download and untar Dgraph binaries
              if curl --output /dev/null --silent --head --fail "$dgraph_link"; then
              echo "Downloading $dgraph_link"
              curl -L --progress-bar "$dgraph_link" -o "/tmp/dgraph-linux-amd64.tar.gz"
              echo "Download complete."
              else
              echo "Soz Failed."
              exit 1;
              fi
              sudo tar -C /usr/bin -xzf /tmp/dgraph-linux-amd64.tar.gz
              until nc -w 2 ${DgraphLoadBalancer} 5080 &> /dev/null
              do
                sleep 1
                echo "No zero available, retrying"
              done
              dgraph alpha --my=$(hostname -f):7080 --lru_mb 3072 --zero ${DgraphLoadBalancer}:5080
            - DgraphLoadBalancer: !GetAtt DgraphZeroELB.DNSName
  DgraphAlphaCPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '70'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
        - Ref: DgraphAlphaScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: DgraphAlpha
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  DgraphAlphaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: ApplicationVPC
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9080'
          ToPort: '9080'
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: '7080'
          ToPort: '7080'
          CidrIp: 10.0.0.0/16